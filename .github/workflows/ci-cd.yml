name: CI/CD with SonarQube & Snyk (Java Maven)

on:
  push:
    branches:
      - main
      - dev
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven & run tests
        run: mvn -B clean verify

      - name: Run JaCoCo report (XML + HTML)
        run: mvn jacoco:report

      # Only run SonarQube and Snyk on main branch
      - name: Copy Maven dependencies
        if: github.ref == 'refs/heads/main'
        run: mvn dependency:copy-dependencies -DoutputDirectory=target/dependency

      - name: SonarCloud Scan
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          args: >
            -Dsonar.projectKey=Prashantkumar477447_CI-CD-Java
            -Dsonar.organization=prashantkumar477447
            -Dsonar.java.binaries=target/classes
            -Dsonar.java.libraries=target/dependency/*.jar
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true   # âœ… Prevent pipeline failure on Quality Gate

      - name: Install Snyk CLI
        if: github.ref == 'refs/heads/main'
        run: npm install -g snyk

      - name: Authenticate Snyk
        if: github.ref == 'refs/heads/main'
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Maven Scan
        if: github.ref == 'refs/heads/main'
        run: snyk test --all-projects --severity-threshold=high
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            cd /path/to/your/deploy/folder
            git pull origin main
            mvn clean install
            # If using Docker:
            # docker-compose down
            # docker-compose up -d
