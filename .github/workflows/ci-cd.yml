name: CI/CD with SonarQube, Snyk & Deploy (Java + Web App)

on:
  push:
    branches:
      - main
      - dev
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven & run tests
        run: mvn -B clean verify

      - name: Run JaCoCo report
        run: mvn jacoco:report

      # SonarCloud & Snyk only for main branch
      - name: Copy Maven dependencies
        if: github.ref == 'refs/heads/main'
        run: mvn dependency:copy-dependencies -DoutputDirectory=target/dependency

      - name: SonarCloud Scan
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          args: >
            -Dsonar.projectKey=Prashantkumar477447_CI-CD-Java
            -Dsonar.organization=prashantkumar477447
            -Dsonar.java.binaries=target/classes
            -Dsonar.java.libraries=target/dependency/*.jar
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Install Snyk CLI
        if: github.ref == 'refs/heads/main'
        run: npm install -g snyk

      - name: Authenticate Snyk
        if: github.ref == 'refs/heads/main'
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Maven Scan
        if: github.ref == 'refs/heads/main'
        run: snyk test --all-projects --severity-threshold=high
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

  deploy-main:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy via SSH (Production)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          script: |
            # Production deploy folder
            PROD_DIR="/home/ubuntu/my-web-app-prod"
            mkdir -p $PROD_DIR
            chown -R ubuntu:ubuntu $PROD_DIR
            chmod -R 755 $PROD_DIR

            cd $PROD_DIR

            # Pull latest code from main branch
            if [ ! -d ".git" ]; then
              git init
              git remote add origin https://github.com/Prashantkumar477447/CI-CD-Java.git
            fi
            git fetch origin main
            git reset --hard origin/main

            # Build Maven app (optional)
            if command -v mvn &> /dev/null; then
              mvn clean install
            else
              sudo apt update
              sudo apt install -y maven
              mvn clean install
            fi

            echo "Production deployment completed!"

  deploy-dev:
  name: Deploy Staging
  runs-on: ubuntu-latest
  needs: build
  if: github.ref == 'refs/heads/dev'  # only for dev branch pushes
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy via SSH (Staging)
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        port: 22
        script: |
          DEV_DIR="/home/ubuntu/my-web-app-dev"
          mkdir -p $DEV_DIR
          chown -R ubuntu:ubuntu $DEV_DIR
          chmod -R 755 $DEV_DIR
          cd $DEV_DIR
          if [ ! -d ".git" ]; then
            git init
            git remote add origin https://github.com/Prashantkumar477447/CI-CD-Java.git
          fi
          git fetch origin dev
          git reset --hard origin/dev
          echo "Staging deployment completed!"

    g deployment completed!"
